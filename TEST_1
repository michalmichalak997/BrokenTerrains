#include <iostream>
#include <vector>
#include <algorithm>
#include "assert.h"

using namespace std;

struct Point {

double xc,yc,zc;
Point(double xcoord, double ycoord,  double zcoord){
this->xc=xcoord;
this->yc=ycoord;
this->zc=zcoord;
}

 double z() const
 {
return this->zc;
}

};

int main()
{
    vector<Point>points_b_inclined;

    double max_1=6, max_2=90, max_3=91, max_4=91.5;
    double tab[4]={max_1, max_2, max_3, max_4};

    cout << "Maximal element in the container: " << *max_element(tab, tab+4) << endl;
    auto pos1=std::distance ( tab,     max_element(tab, tab+4) );
    cout << "Position of the maximal element in the container: " <<  pos1  << endl;

    points_b_inclined={Point(1,4,tab[0]), Point(1,4,tab[1]), Point(0,4,tab[2]), Point(0,4,tab[3])};

    auto& greatest_elev = *max_element(points_b_inclined.begin(), points_b_inclined.end(),
	[](const Point& point1, const Point& point2) { return (point1.z() < point2.z()); }
);
     auto& smallest_elev = *min_element(points_b_inclined.begin(), points_b_inclined.end(),
	[](const Point& point1, const Point& point2) { return (point1.z() < point2.z()); }
);

auto start=points_b_inclined.begin();
auto max_el= max_element(points_b_inclined.begin(), points_b_inclined.end(),
	[](const Point& point1, const Point& point2) { return (point1.z() < point2.z()); });

auto pos2= std::distance( start , max_el);

cout << "Maximum z:  "<< greatest_elev.z() << "  Minimum z:  "  << smallest_elev.z() << endl;

auto elevation_difference = greatest_elev.z() - smallest_elev.z();

cout << elevation_difference << endl;

assert(pos1==pos2);

//assert( )

    return 0;
}
